// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Movie.Db;
using System;

namespace Movie.Db.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20170919020854_Initial001")]
    partial class Initial001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Movie")
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Movie.Db.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Line1");

                    b.Property<string>("Line2");

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Movie.Db.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("Description");

                    b.Property<int>("LocationType");

                    b.Property<string>("Name");

                    b.Property<int?>("VirtualAddressId");

                    b.HasKey("LocationId");

                    b.HasIndex("AddressId");

                    b.HasIndex("VirtualAddressId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Movie.Db.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<int>("MediaType");

                    b.Property<int>("MovieId");

                    b.Property<int?>("PersonId");

                    b.Property<int>("UserId");

                    b.HasKey("MediaId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Movie.Db.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Release");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movie.Db.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("PersonId");

                    b.HasIndex("AddressId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Movie.Db.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PasswordHash");

                    b.Property<int>("PersonId");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Movie.Db.VirtualAddress", b =>
                {
                    b.Property<int>("VirtualAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("VirtualAddressId");

                    b.ToTable("VirtualAddress");
                });

            modelBuilder.Entity("Movie.Db.Location", b =>
                {
                    b.HasOne("Movie.Db.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Movie.Db.VirtualAddress", "VirtualAddress")
                        .WithMany()
                        .HasForeignKey("VirtualAddressId");
                });

            modelBuilder.Entity("Movie.Db.Media", b =>
                {
                    b.HasOne("Movie.Db.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movie.Db.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movie.Db.Person")
                        .WithMany("MediaCollection")
                        .HasForeignKey("PersonId");

                    b.HasOne("Movie.Db.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movie.Db.Person", b =>
                {
                    b.HasOne("Movie.Db.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movie.Db.User", b =>
                {
                    b.HasOne("Movie.Db.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
